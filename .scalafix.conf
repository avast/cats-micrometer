rules = [
  Disable
  DisableSyntax
  ExplicitResultTypes
  LeakingImplicitClassVal
  MissingFinal
  NoAutoTupling
  NoValInForComprehension
  OrganizeImports
  ProcedureSyntax
  RemoveUnused
]

RemoveUnused {
  imports = false // handled by OrganizeImports
}

OrganizeImports {
  expandRelative = true
  groupedImports = Merge
  # IntelliJ IDEA's order so that they don't fight each other
  groups = [
    "*"
    "re:(javax?|scala)\\."
  ]
}

Disable.ifSynthetic = [
  "java/io/Serializable"
  "scala/Any"
  ## "scala/Product" # triggers even on non-synthetic

  # local type inference + covariant types fires this
  # "scala/Nothing"

  # when upstream broke noImplicitConversion and we don't agree that their
  # implicits are worth the mental burden.
  "scala/Option.option2Iterable"
  "scala/Predef.any2stringadd"

  # I don't understand why these are synthetic
  # https://github.com/scalacenter/scalafix/issues/703
  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    message = "not a total function"
  }
]

DisableSyntax {
  noAsInstanceOf = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true // https://stackoverflow.com/questions/20380800/scala-implicits-resolution-mechanism-is-declaration-order-dependent#comment31809401_20381535
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
//  noUniversalEquality = true TODO: turn on
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}
